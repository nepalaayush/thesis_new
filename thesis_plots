#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed May 22 12:13:55 2024

@author: aayush
"""

import os 
#os.chdir('C:/Users/Aayush/Documents/thesis_files/thesis_new')
os.chdir('/data/projects/ma-nepal-segmentation/scripts/git/thesis_new')

import pickle
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np 

sns.set_context("talk")

#%%
with open('/data/projects/ma-nepal-segmentation/scripts/git/thesis_new/master_df_point.pkl', 'rb') as file:
    master_df_point =  pickle.load(file)

#%%
def plot_binned_angle_data(df, bin_width):
    # Make a copy of the DataFrame to ensure the original remains unchanged
    df_copy = df.copy()

    # Define bin edges that cover the entire expected range of flexion percentages
    bin_edges = list(range(-100, 101, bin_width))
    
    # Bin 'Percentage of Flexion' and calculate bin centers
    df_copy['Custom_Bin'] = pd.cut(df_copy['Percent Flexed'], bins=bin_edges, include_lowest=True)
    df_copy['Bin_Center'] = df_copy['Custom_Bin'].apply(lambda x: (x.left + x.right) / 2)

    # Group by 'Condition', the new 'Custom_Bin', and 'Dataset' to calculate means
    grouped = df_copy.groupby(['Condition', 'Custom_Bin', 'Dataset'])['angle'].mean().reset_index()
    grouped['Bin_Center'] = grouped['Custom_Bin'].apply(lambda x: (x.left + x.right) / 2)

    # Filter out a specific dataset if needed
    final_data = grouped[grouped['Dataset'] != 6]

    # Plotting the data
    plt.figure(figsize=(10, 6))
    lineplot = sns.lineplot(
        data=final_data,
        x='Bin_Center',
        y='angle',
        hue='Condition',
        marker="o",  # Adds markers to each data point
        ci='sd'  # Uses standard deviation for the confidence intervals
    )
    handles, labels = lineplot.get_legend_handles_labels()
    new_labels = ['Unloaded', 'Loaded']
    lineplot.legend(handles, new_labels)
    #plt.axhline(y=180, color='gray', linestyle='--')  # Adds a horizontal line at y=0
    plt.xlim(-100,100)
    plt.xlabel("Percentage of Flexion [%]")
    plt.ylabel("Average Angle [°]")
    plt.title("Angle between the long axis of tibia and femur segments")
    plt.grid(True)
    #plt.savefig('resutl_angle_modification.svg', dpi=300)
    plt.tight_layout()
    plt.show()
    
    
# Example usage
plot_binned_angle_data(modified_angle_df, 10)

#%%
# lets split the data and plot side by side without aggregation 
plt.clf()
fg = sns.relplot(
    data=modified_angle_df, 
    x="Percent Flexed", 
    y="angle",
    #hue="Dataset", 
    col="Condition", 
    kind="line",
    facet_kws={'sharey': True, 'sharex': True},  # Adjust axis sharing as needed
    style="Dataset",
    markers =True
)

fg.refline(y=180)
fg.set_axis_labels("Percentage of flexion [%]", "Angle[°]")
plt.savefig('angle_non_agg.svg', dpi=300)


#%%
plt.clf()
fg = sns.relplot(
    data=master_df_point, 
    x="Percent Flexed", 
    y="Relative Norm",
    #hue="Dataset", 
    col="Condition", 
    kind="line",
    facet_kws={'sharey': True, 'sharex': True},  # Adjust axis sharing as needed
    style="Dataset",
    markers =True
)

fg.refline(y=0)
fg.set_axis_labels("Percentage of flexion [%]", "Euclidean Distance[mm]")
plt.savefig('norm_non_agg.svg', dpi=300)

